{"ast":null,"code":"var React = require('react');\nvar resso = require('resso');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nvar resso__default = /*#__PURE__*/_interopDefaultLegacy(resso);\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar Art = /*#__PURE__*/function () {\n  function Art() {}\n  // Default global configuration\n  /**\r\n   * Set global configuration\r\n   * @param config\r\n   */\n  Art.setup = function setup(config) {\n    if (config) {\n      this.config = _extends({}, this.config, config);\n      if (this.config.axios) {\n        this.axios = this.config.axios.create({\n          baseURL: this.config.baseURL\n        });\n      }\n    }\n  };\n  return Art;\n}();\nArt.axios = void 0;\nArt.config = {\n  showErrorMessage: function showErrorMessage(res) {\n    console.log(res);\n  },\n  showSuccessMessage: function showSuccessMessage(res) {\n    console.log(res);\n  },\n  handlePage: function handlePage(page, pageSize) {\n    return {\n      page: page,\n      pageSize: pageSize\n    };\n  },\n  handleHttpResult: function handleHttpResult(resBody) {\n    var _ref = resBody || {},\n      success = _ref.success,\n      errorCode = _ref.errorCode,\n      errorMessage = _ref.errorMessage,\n      payload = _ref.payload,\n      count = _ref.count;\n    return {\n      success: success,\n      code: errorCode,\n      message: errorMessage,\n      data: payload,\n      total: count\n    };\n  }\n};\n\n/**\r\n * API request status\r\n */\nexports.ViewState = void 0;\n(function (ViewState) {\n  ViewState[ViewState[\"idle\"] = 0] = \"idle\";\n  ViewState[ViewState[\"busy\"] = 1] = \"busy\";\n  ViewState[ViewState[\"error\"] = 2] = \"error\";\n})(exports.ViewState || (exports.ViewState = {}));\nvar dataCache = new Map();\nfunction createCacheKey(key, ids) {\n  var prefix = 'key';\n  return prefix + \"_\" + key + (ids == null ? void 0 : ids.map(function (id) {\n    return \"_\" + id;\n  }));\n}\nfunction setCache(key, data) {\n  dataCache.set(key, data);\n}\nfunction getCache(key) {\n  return dataCache.get(key);\n}\nfunction clearCache(key) {\n  dataCache[\"delete\"](key);\n}\nfunction getAxiosRequest(method, url, body, config) {\n  switch (method) {\n    case 'POST':\n    case 'post':\n      return Art.axios.post(url, body, config);\n    case 'PUT':\n    case 'put':\n      return Art.axios.put(url, body, config);\n    case 'DELETE':\n    case 'delete':\n      return Art.axios[\"delete\"](url, config);\n    default:\n      return Art.axios.get(url, config);\n  }\n}\nfunction handleError(e) {\n  if (Art.config.axios.isCancel(e)) {\n    return {\n      success: false,\n      isCancel: true,\n      message: e.message\n    };\n  } else {\n    var response = e.response;\n    if (response) {\n      var axiosRes = e;\n      if (Art.config.handleHttpErrorResult) {\n        return _extends({\n          message: axiosRes.message\n        }, Art.config.handleHttpErrorResult(response), {\n          success: false,\n          status: response.status,\n          isCancel: false\n        });\n      } else {\n        return {\n          success: false,\n          status: response.status,\n          code: axiosRes.code,\n          message: axiosRes.message,\n          isCancel: false\n        };\n      }\n    } else {\n      throw new Error(e);\n    }\n  }\n}\n\n/**\r\n * 处理默认请求体\r\n * @param store 状态管理\r\n * @param defaultBody 默认请求内容\r\n * @param body 动态请求参数\r\n */\n\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n  return result;\n} // 处理消息\nvar doRequest = function doRequest(request, store, config, setData) {\n  try {\n    var _temp4 = function _temp4() {\n      setData(myRes);\n      // 处理回调\n      handleCallback(config, myRes);\n      // 处理消息\n      handleMessage(config, myRes);\n      // 结束loading\n      handleEndLoading(config);\n      return myRes;\n    };\n    // 处理开始loading\n    handleStartLoading(config);\n    var setStatus = function setStatus(status) {\n      try {\n        var loadingWait = function loadingWait() {\n          try {\n            var _temp9 = function () {\n              if (status !== exports.ViewState.busy && config.loadingDelayMs) {\n                return Promise.resolve(waitTime(config.loadingDelayMs)).then(function () {});\n              }\n            }();\n            return Promise.resolve(_temp9 && _temp9.then ? _temp9.then(function () {}) : void 0);\n          } catch (e) {\n            return Promise.reject(e);\n          }\n        };\n        var _temp7 = function () {\n          if (config != null && config.status) {\n            return Promise.resolve(loadingWait()).then(function () {\n              store.setStatus(status);\n            });\n          }\n        }();\n        return Promise.resolve(_temp7 && _temp7.then ? _temp7.then(function () {}) : void 0);\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    };\n    // 发送请求\n    var myRes;\n    var _temp5 = _catch(function () {\n      // 设置状态\n      return Promise.resolve(setStatus(exports.ViewState.busy)).then(function () {\n        // 请求接口\n        return Promise.resolve(request.request()).then(function (res) {\n          // 转换数据\n          myRes = config.handleHttpResult ? config.handleHttpResult(res) : Art.config.handleHttpResult ? Art.config.handleHttpResult(res) : res;\n          // 设置原始值\n          store.originData = myRes.data;\n          // 转换成前端想要的数据格式\n          if (config.postData) {\n            myRes.data = config.postData(myRes.data);\n          }\n          // 设置状态\n          return Promise.resolve(setStatus(exports.ViewState.idle)).then(function () {});\n        });\n      });\n    }, function (e) {\n      // 处理异常\n      myRes = handleRequestCatch(e, request);\n      var _temp = function () {\n        if (!myRes.isCancel) {\n          // 设置状态\n          return Promise.resolve(setStatus(exports.ViewState.error)).then(function () {});\n        } else {\n          // 设置状态\n          return Promise.resolve(setStatus(exports.ViewState.idle)).then(function () {});\n        }\n      }();\n      return _temp && _temp.then ? _temp.then(function () {}) : void 0;\n    });\n    return Promise.resolve(_temp5 && _temp5.then ? _temp5.then(_temp4) : _temp4(_temp5));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\nfunction updateDefaultBody(store, defaultBody, body) {\n  var _body;\n  if (defaultBody) {\n    var _defaultBody;\n    if (typeof defaultBody === 'function') {\n      _defaultBody = defaultBody();\n    } else {\n      _defaultBody = defaultBody;\n    }\n    _body = _extends({}, _defaultBody, body != null ? body : {});\n  } else {\n    _body = body;\n  }\n  store.body = _body;\n}\n/**\r\n * 添加分页请求参数\r\n * @param store\r\n * @param usePage 是否使用分页\r\n */\nfunction handlePageBody(store, usePage) {\n  var _body = store.body;\n  if (usePage) {\n    var _store = store;\n    if (Art.config.handlePage) {\n      var _body2;\n      _body = _extends({}, (_body2 = _body) != null ? _body2 : {}, Art.config.handlePage(_store.current, _store.pageSize));\n    } else {\n      var _body3;\n      _body = _extends({}, (_body3 = _body) != null ? _body3 : {}, {\n        current: _store.current,\n        pageSize: _store.pageSize\n      });\n    }\n  }\n  return _body;\n}\n/**\r\n * 转化成提交之前的请求体\r\n * @param body\r\n * @param postBody\r\n */\nfunction getPostBody(body, postBody) {\n  var _body = body;\n  if (postBody && _body) {\n    _body = postBody(_body);\n  }\n  return _body;\n}\n/**\r\n * 自动清除\r\n * @param store\r\n * @param autoClear\r\n */\nfunction autoClear(store, autoClear) {\n  if (autoClear) {\n    store.clear();\n  }\n}\n/**\r\n * 获取当前配置项目\r\n * @param config\r\n */\nfunction getMyConfig(config) {\n  // 初始化默认配置\n  var defaultConfig = {\n    status: true,\n    loading: false,\n    isDefaultSet: true,\n    autoClear: false,\n    cacheTime: 300000,\n    staleTime: 0,\n    showMessage: true,\n    showSuccessMessage: false,\n    showErrorMessage: true\n  };\n  // 得到当前配置\n  // @ts-ignore\n  return _extends({}, defaultConfig, config != null ? config : {});\n}\n/**\r\n * 处理开始loading\r\n * @param config\r\n */\nfunction handleStartLoading(config) {\n  if (config.loading && config.startLoading) {\n    config.startLoading();\n  }\n}\n/**\r\n * 处理结束loading\r\n * @param config\r\n */\nfunction handleEndLoading(config) {\n  if (config.loading && config.startLoading) {\n    config.startLoading();\n  }\n}\nfunction handleMessage(config, res) {\n  if (config.showMessage) {\n    if (res.success && config.showSuccessMessage && Art.config.showSuccessMessage) {\n      Art.config.showSuccessMessage(res);\n    } else if (!res.success && config.showErrorMessage && Art.config.showErrorMessage) {\n      Art.config.showErrorMessage(res);\n    }\n  }\n}\n// 处理回调\nfunction handleCallback(config, res) {\n  // 请求结束\n  if (res.success) {\n    if (config.successCallback) {\n      config.successCallback(res, false);\n    }\n  } else if (!res.isCancel) {\n    if (config.failCallback) {\n      config.failCallback(res);\n    }\n  }\n  if (config.onLoadComplete) {\n    config.onLoadComplete(res);\n  }\n}\n/**\r\n * 处理请求失败\r\n * @param e\r\n * @param request\r\n */\nfunction handleRequestCatch(e, request) {\n  var result = {\n    success: false,\n    isCancel: false,\n    message: e\n  };\n  if (request.type === 'axios') {\n    result = handleError(e);\n  }\n  if (Art.config.handleHttpError) {\n    Art.config.handleHttpError(e);\n  }\n  console.log(e);\n  return result;\n}\n/**\r\n * 创建请求\r\n * @param request 请求或者地址\r\n * @param body 请求阐述\r\n * @param method 方法\r\n */\nfunction getRequest(request, body, method) {\n  var _request;\n  var source;\n  if (typeof request === 'function') {\n    _request = function _request() {\n      return request(body);\n    };\n  } else {\n    var url = request;\n    var isPathParams = url.includes('{') && url.includes('}');\n    var _method = method != null ? method : isPathParams ? 'GET' : body ? 'POST' : 'GET';\n    var isPost = method === 'POST' || method === 'post';\n    if (body && typeof body === 'object' && isPathParams) {\n      Object.keys(body).forEach(function (key) {\n        // @ts-ignore\n        url = url.replace(new RegExp('\\\\{' + key + '\\\\}', 'g'), body[key]);\n      });\n    }\n    if (Art.config.axios != null) {\n      source = Art.config.axios.CancelToken.source();\n      _request = function _request() {\n        return getAxiosRequest(_method, url, body != null ? body : isPost ? {} : undefined, {\n          cancelToken: source.token\n        });\n      };\n    } else {\n      throw new Error('Coco 必须实例化 http 组件，目前支持axios');\n    }\n  }\n  return {\n    request: _request,\n    type: 'axios',\n    source: source\n  };\n}\nfunction setBody(store, inBody, replace) {\n  if (replace === void 0) {\n    replace = false;\n  }\n  var body = store.body;\n  if (body && !replace) {\n    store.body = _extends({}, inBody, store.body);\n  } else {\n    store.body = inBody;\n  }\n}\n/**\r\n * 延迟等待\r\n * @param time 等待时间\r\n */\nvar waitTime = function waitTime(time) {\n  if (time === void 0) {\n    time = 100;\n  }\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      resolve(true);\n    }, time);\n  });\n};\n/**\r\n * 处理请求\r\n * @param request\r\n * @param config\r\n */\nfunction doRun(request, config) {\n  if (config.throttleMs) {\n    return throttle(request, config.throttleMs);\n  }\n  return debounce(request, config.debounceMs);\n}\n// 防抖函数\nfunction debounce(request, ms) {\n  var timeout;\n  return function (body, config) {\n    clearTimeout(timeout);\n    return new Promise(function (resolve) {\n      if (ms) {\n        timeout = setTimeout(function () {\n          resolve(request(body, config));\n        }, ms);\n      } else {\n        resolve(request(body, config));\n      }\n    });\n  };\n}\n// 节流函数\nfunction throttle(request, waitMs) {\n  var timeout;\n  var old = 0;\n  return function (body, config) {\n    return new Promise(function (resolve) {\n      var now = new Date().valueOf();\n      if (!old) {\n        old = now;\n      }\n      if (now - old > waitMs) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        resolve(request(body, config));\n        old = now;\n      } else if (!timeout) {\n        timeout = setTimeout(function () {\n          old = new Date().valueOf();\n          timeout = null;\n          resolve(request(body, config));\n        }, waitMs);\n      }\n    });\n  };\n}\n/**\r\n * 处理数据缓存\r\n * @param config\r\n * @param request\r\n * @param store\r\n * @param res\r\n */\nfunction setStoreCacheData(config, request, store, res) {\n  if (!config.cache) {\n    return;\n  }\n  var key = getCacheKey(config, request, store);\n  var pagination;\n  try {\n    if (config.usePage) {\n      var current = store.current,\n        pageSize = store.pageSize,\n        total = store.total,\n        offset = store.offset;\n      pagination = {\n        current: current,\n        pageSize: pageSize,\n        total: total,\n        offset: offset\n      };\n    }\n  } catch (e) {}\n  setCache(key, {\n    body: store.body,\n    data: res,\n    time: new Date().getTime(),\n    pagination: pagination\n  });\n}\nfunction getStoreCacheData(config, request, store) {\n  if (!config.cache) {\n    return {\n      cache: undefined,\n      active: false\n    };\n  }\n  var key = getCacheKey(config, request, store);\n  var cache = getCache(key);\n  if (cache) {\n    var _config$cacheTime;\n    var cacheTime = (_config$cacheTime = config.cacheTime) != null ? _config$cacheTime : 300000;\n    if (cacheTime < 0 || new Date().getTime() - cache.time <= cacheTime) {\n      return {\n        cache: cache,\n        active: true\n      };\n    } else {\n      clearCache(key);\n    }\n  }\n  return {\n    cache: undefined,\n    active: false\n  };\n}\nfunction getCacheRequest(config, cache, store) {\n  var _config$staleTime;\n  var res = cache.data;\n  if (config.successCallback) {\n    config.successCallback(res, true);\n  }\n  if (cache.pagination) {\n    try {\n      var _store = store;\n      var _cache$pagination = cache.pagination,\n        current = _cache$pagination.current,\n        pageSize = _cache$pagination.pageSize,\n        total = _cache$pagination.total,\n        offset = _cache$pagination.offset;\n      _store.current = current;\n      _store.pageSize = pageSize;\n      _store.total = total;\n      _store.offset = offset;\n    } catch (e) {}\n  }\n  store.data = cache.data.data;\n  store.body = cache.body;\n  // 控制新鲜度, 如果过期新鲜度\n  var staleTime = (_config$staleTime = config.staleTime) != null ? _config$staleTime : 0;\n  if (staleTime >= 0 && new Date().getTime() - cache.time > staleTime) {\n    store.refresh().then();\n  }\n  return new Promise(function (resolve) {\n    return resolve(res);\n  });\n}\nfunction getCacheKey(config, request, store) {\n  var key;\n  if (config.cache === true || typeof config.cache === 'function') {\n    if (typeof request === 'function') {\n      throw new Error('request是url的形式的时候，cache只能是字符串');\n    }\n  }\n  if (typeof config.cache === 'string') {\n    key = createCacheKey(config.cache);\n  } else if (typeof config.cache === 'function') {\n    var ids = config.cache(store.body);\n    key = createCacheKey(request, ids);\n  } else {\n    key = createCacheKey(request);\n  }\n  if (config.usePage) {\n    var current = store.current,\n      pageSize = store.pageSize,\n      offset = store.offset;\n    return key + \"_\" + current + \"_\" + pageSize + offset ? \"'_\" + offset + \"'\" : '';\n  }\n  return key;\n}\n\n// @ts-ignore\nvar document = window ? window.document : undefined;\nvar visible = 'visible';\n/**\r\n * 检查浏览器标签切换\r\n */\nvar useBrowserPageChange = function useBrowserPageChange() {\n  var _React$useState = React__default[\"default\"].useState(false),\n    visibilityChange = _React$useState[0],\n    setVisibilityChange = _React$useState[1];\n  var getHiddenProp = function getHiddenProp() {\n    if (!document) {\n      return null;\n    }\n    var prefixes = ['webkit', 'moz', 'ms', 'o'];\n    // if 'hidden' is natively supported just return it\n    if ('hidden' in document) {\n      return 'hidden';\n    }\n    // otherwise loop over all the known prefixes until we find one\n    for (var i = 0; i < prefixes.length; i++) {\n      if (prefixes[i] + 'Hidden' in document) return prefixes[i] + 'Hidden';\n    }\n    // otherwise it's not supported\n    return null;\n  };\n  var getVisibilityState = function getVisibilityState() {\n    var prefixes = ['webkit', 'moz', 'ms', 'o'];\n    if ('visibilityState' in document) return 'visibilityState';\n    for (var i = 0; i < prefixes.length; i++) {\n      if (prefixes[i] + 'VisibilityState' in document) return prefixes[i] + 'VisibilityState';\n    }\n    // otherwise it's not supported\n    return null;\n  };\n  React.useEffect(function () {\n    var _getHiddenProp;\n    var eventName = ((_getHiddenProp = getHiddenProp()) != null ? _getHiddenProp : '').replace(/[H|h]idden/, '') + 'visibilitychange';\n    if (getHiddenProp()) {\n      document.addEventListener(eventName, function () {\n        var _getVisibilityState;\n        setVisibilityChange(document[(_getVisibilityState = getVisibilityState()) != null ? _getVisibilityState : ''] === visible);\n      }, false);\n    }\n    return function () {\n      document.removeEventListener(eventName, function () {\n        var _getVisibilityState2;\n        setVisibilityChange(document[(_getVisibilityState2 = getVisibilityState()) != null ? _getVisibilityState2 : ''] === visible);\n      });\n    };\n  }, [getHiddenProp()]);\n  return {\n    visibilityChange: visibilityChange\n  };\n};\nfunction createQueryStore(request, config) {\n  var _config$pageSize;\n  // 得到当前配置\n  var myConfig = getMyConfig(config);\n  // 当前请求\n  var currentRequest;\n  // 设置返回数据\n  function setResData(res) {\n    if (res.success) {\n      var _myConfig;\n      if (myConfig.isDefaultSet) {\n        var _res$total;\n        store.setData(res.data);\n        store.total = (_res$total = res.total) != null ? _res$total : 0;\n      }\n      if ((_myConfig = myConfig) != null && _myConfig.status && (store == null ? void 0 : store.status) !== exports.ViewState.error) {\n        store.isEmpty = !res.data || res.data && res.data instanceof Array && !res.data.length;\n      }\n      // 记录最后时间\n      store.lastRequestTime = new Date().getTime();\n      // 处理缓存\n      setStoreCacheData(myConfig, request, store, res);\n    } else if (!res.isCancel) {\n      store.error = {\n        message: res.message,\n        code: res.code,\n        status: res.status\n      };\n    }\n  }\n  // 创建store\n  var store = resso__default[\"default\"]({\n    isBusy: false,\n    isError: false,\n    status: exports.ViewState.idle,\n    isEmpty: undefined,\n    error: undefined,\n    setStatus: function setStatus(status) {\n      store.status = status;\n      store.isError = status === exports.ViewState.error;\n      store.isBusy = status === exports.ViewState.busy;\n    },\n    lastRequestTime: undefined,\n    body: undefined,\n    setBody: function setBody$1(inBody, replace) {\n      if (replace === void 0) {\n        replace = false;\n      }\n      setBody(store, inBody, replace);\n    },\n    current: 1,\n    pageSize: (_config$pageSize = config == null ? void 0 : config.pageSize) != null ? _config$pageSize : 10,\n    total: 0,\n    offset: undefined,\n    setPage: function setPage(config) {\n      var _ref = config != null ? config : {},\n        current = _ref.current,\n        pageSize = _ref.pageSize;\n      if (current) {\n        store.current = current;\n      }\n      if (pageSize) {\n        store.pageSize = pageSize;\n      }\n      return store.run();\n    },\n    originData: undefined,\n    data: undefined,\n    setData: function setData(data) {\n      store.data = data;\n    },\n    refresh: function refresh(config) {\n      myConfig = _extends({}, myConfig, {\n        loading: false,\n        status: false\n      }, config != null ? config : {}, {\n        refresh: true\n      });\n      if (!currentRequest) {\n        return store.run(undefined, myConfig);\n      } else {\n        return doRequest(currentRequest, store, myConfig, setResData);\n      }\n    },\n    run: doRun(function (body, config) {\n      myConfig = _extends({}, myConfig, config);\n      // 清除\n      autoClear(store, myConfig.autoClear);\n      console.log(store);\n      // 获取缓存\n      var _getStoreCacheData = getStoreCacheData(myConfig, request, store),\n        cache = _getStoreCacheData.cache,\n        active = _getStoreCacheData.active;\n      // 如果有缓存 并且缓存有效\n      if (!(config != null && config.refresh) && cache && active) {\n        return getCacheRequest(myConfig, cache, store);\n      } else {\n        // 设置body\n        updateDefaultBody(store, myConfig.defaultBody, body);\n        // 处理分页\n        var _body = handlePageBody(store, myConfig.usePage);\n        // 获取准备提交的请求体\n        _body = getPostBody(_body, myConfig.postBody);\n        // 获取请求体\n        currentRequest = getRequest(request, _body, myConfig.method);\n        // 发送请求\n        return doRequest(currentRequest, store, myConfig, setResData);\n      }\n    }, myConfig),\n    cancel: function cancel(message) {\n      if (currentRequest) {\n        if (currentRequest.type === 'axios') {\n          var _currentRequest$sourc;\n          // eslint-disable-next-line no-unused-expressions\n          (_currentRequest$sourc = currentRequest.source) == null ? void 0 : _currentRequest$sourc.cancel(message);\n        }\n      }\n    },\n    clear: function clear() {\n      store.data = undefined;\n      store.body = undefined;\n      store.total = 0;\n      store.current = 1;\n      store.isEmpty = undefined;\n    }\n  });\n  return store;\n}\nfunction useQuery(request, config, deps) {\n  var store = React.useMemo(function () {\n    return createQueryStore(request, config);\n  }, deps != null ? deps : []);\n  React.useEffect(function () {\n    var _config$manual;\n    var manual = (_config$manual = config == null ? void 0 : config.manual) != null ? _config$manual : false;\n    if (!manual) {\n      store.run().then();\n    }\n    var interval;\n    if (config != null && config.pollingIntervalMs) {\n      if (interval) {\n        clearInterval(interval);\n      }\n      interval = setInterval(function () {\n        store.run().then();\n      }, config == null ? void 0 : config.pollingIntervalMs);\n    }\n    return function () {\n      if (interval) {\n        clearInterval(interval);\n      }\n      store.cancel();\n    };\n  }, deps != null ? deps : []);\n  var _useBrowserPageChange = useBrowserPageChange(),\n    visibilityChange = _useBrowserPageChange.visibilityChange;\n  React.useEffect(function () {\n    if (config != null && config.refreshOnWindowFocus && visibilityChange) {\n      var _config$refreshOnWind;\n      if (!store.lastRequestTime || new Date().getTime() - store.lastRequestTime > ((_config$refreshOnWind = config == null ? void 0 : config.refreshOnWindowFocusTimespanMs) != null ? _config$refreshOnWind : 0)) if ((config == null ? void 0 : config.refreshOnWindowFocusMode) === 'run') {\n        store.run().then();\n      } else {\n        store.refresh().then();\n      }\n    }\n  }, [visibilityChange]);\n  return store;\n}\nfunction createSubmitStore(request, config) {\n  // 得到当前配置\n  var myConfig = getMyConfig(config);\n  // 当前请求\n  var currentRequest;\n  // 设置返回数据\n  function setResData(res) {\n    if (res.success) {\n      var _myConfig;\n      if (myConfig.isDefaultSet) {\n        store.setData(res.data);\n      }\n      if ((_myConfig = myConfig) != null && _myConfig.status && (store == null ? void 0 : store.status) !== exports.ViewState.error) {\n        store.isEmpty = !res.data || res.data && res.data instanceof Array && !res.data.length;\n      }\n      // 记录最后时间\n      store.lastRequestTime = new Date().getTime();\n      // 处理缓存\n      setStoreCacheData(myConfig, request, store, res);\n    } else if (!res.isCancel) {\n      store.error = {\n        message: res.message,\n        code: res.code,\n        status: res.status\n      };\n    }\n  }\n  // 创建store\n  var store = resso__default[\"default\"]({\n    isBusy: false,\n    isError: false,\n    status: exports.ViewState.idle,\n    isEmpty: undefined,\n    error: undefined,\n    setStatus: function setStatus(status) {\n      store.status = status;\n      store.isError = status === exports.ViewState.error;\n      store.isBusy = status === exports.ViewState.busy;\n    },\n    lastRequestTime: undefined,\n    body: undefined,\n    setBody: function setBody$1(inBody, replace) {\n      if (replace === void 0) {\n        replace = false;\n      }\n      setBody(store, inBody, replace);\n    },\n    originData: undefined,\n    data: undefined,\n    setData: function setData(data) {\n      store.data = data;\n    },\n    refresh: function refresh(config) {\n      myConfig = _extends({}, myConfig, {\n        loading: false,\n        status: false\n      }, config != null ? config : {}, {\n        refresh: true\n      });\n      if (!currentRequest) {\n        return store.run(undefined, myConfig);\n      } else {\n        return doRequest(currentRequest, store, myConfig, setResData);\n      }\n    },\n    run: doRun(function (body, config) {\n      myConfig = _extends({}, myConfig, config);\n      // 清除\n      autoClear(store, myConfig.autoClear);\n      // 获取缓存\n      var _getStoreCacheData = getStoreCacheData(myConfig, request, store),\n        cache = _getStoreCacheData.cache,\n        active = _getStoreCacheData.active;\n      // 如果有缓存 并且缓存有效\n      if (!(config != null && config.refresh) && cache && active) {\n        return getCacheRequest(myConfig, cache, store);\n      } else {\n        // 设置body\n        updateDefaultBody(store, myConfig.defaultBody, body);\n        // 处理分页\n        var _body = handlePageBody(store, myConfig.usePage);\n        // 获取准备提交的请求体\n        _body = getPostBody(_body, myConfig.postBody);\n        // 获取请求体\n        currentRequest = getRequest(request, _body, myConfig.method);\n        // 发送请求\n        return doRequest(currentRequest, store, myConfig, setResData);\n      }\n    }, myConfig),\n    cancel: function cancel(message) {\n      if (currentRequest) {\n        if (currentRequest.type === 'axios') {\n          var _currentRequest$sourc;\n          // eslint-disable-next-line no-unused-expressions\n          (_currentRequest$sourc = currentRequest.source) == null ? void 0 : _currentRequest$sourc.cancel(message);\n        }\n      }\n    },\n    clear: function clear() {\n      store.data = undefined;\n      store.body = undefined;\n      store.isEmpty = undefined;\n    }\n  });\n  return store;\n}\nfunction useSubmit(request, config, deps) {\n  var store = React.useMemo(function () {\n    return createSubmitStore(request, config);\n  }, deps != null ? deps : []);\n  React.useEffect(function () {\n    var _config$manual;\n    var manual = (_config$manual = config == null ? void 0 : config.manual) != null ? _config$manual : true;\n    if (!manual) {\n      store.run().then();\n    }\n    var interval;\n    if (config != null && config.pollingIntervalMs) {\n      if (interval) {\n        clearInterval(interval);\n      }\n      interval = setInterval(function () {\n        store.run().then();\n      }, config == null ? void 0 : config.pollingIntervalMs);\n    }\n    return function () {\n      if (interval) {\n        clearInterval(interval);\n      }\n      store.cancel();\n    };\n  }, deps != null ? deps : []);\n  var _useBrowserPageChange = useBrowserPageChange(),\n    visibilityChange = _useBrowserPageChange.visibilityChange;\n  React.useEffect(function () {\n    if (config != null && config.refreshOnWindowFocus && visibilityChange) {\n      var _config$refreshOnWind;\n      if (!store.lastRequestTime || new Date().getTime() - store.lastRequestTime > ((_config$refreshOnWind = config == null ? void 0 : config.refreshOnWindowFocusTimespanMs) != null ? _config$refreshOnWind : 0)) if ((config == null ? void 0 : config.refreshOnWindowFocusMode) === 'run') {\n        store.run().then();\n      } else {\n        store.refresh().then();\n      }\n    }\n  }, [visibilityChange]);\n  return store;\n}\nObject.defineProperty(exports, 'resso', {\n  enumerable: true,\n  get: function () {\n    return resso__default[\"default\"];\n  }\n});\nexports.Art = Art;\nexports.createQueryStore = createQueryStore;\nexports.createSubmitStore = createSubmitStore;\nexports.useQuery = useQuery;\nexports.useSubmit = useSubmit;","map":{"version":3,"mappings":"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","names":["Art","setup","config","_extends","axios","create","baseURL","showErrorMessage","res","console","log","showSuccessMessage","handlePage","page","pageSize","handleHttpResult","resBody","success","errorCode","errorMessage","payload","count","code","message","data","total","ViewState","dataCache","Map","key","ids","prefix","map","id","set","getCache","get","clearCache","getAxiosRequest","method","url","body","post","put","handleError","e","isCancel","response","axiosRes","handleHttpErrorResult","status","Error","doRequest","request","store","setData","myRes","handleCallback","handleMessage","handleEndLoading","handleStartLoading","setStatus","loadingWait","busy","loadingDelayMs","waitTime","_temp5","originData","postData","idle","handleRequestCatch","error","updateDefaultBody","defaultBody","_body","_defaultBody","usePage","_store","current","postBody","autoClear","clear","getMyConfig","defaultConfig","loading","isDefaultSet","cacheTime","staleTime","showMessage","startLoading","successCallback","failCallback","onLoadComplete","result","type","handleHttpError","getRequest","_request","source","isPathParams","includes","_method","isPost","Object","keys","forEach","replace","RegExp","CancelToken","undefined","cancelToken","token","setBody","inBody","time","Promise","resolve","setTimeout","throttleMs","throttle","debounce","debounceMs","ms","timeout","clearTimeout","waitMs","old","now","Date","valueOf","setStoreCacheData","cache","getCacheKey","pagination","offset","setCache","getTime","getStoreCacheData","active","getCacheRequest","refresh","then","createCacheKey","document","window","visible","useBrowserPageChange","React","useState","visibilityChange","setVisibilityChange","getHiddenProp","prefixes","i","length","getVisibilityState","useEffect","eventName","addEventListener","removeEventListener","myConfig","currentRequest","setResData","_myConfig","isEmpty","Array","lastRequestTime","resso","isBusy","isError","setPage","run","doRun","handlePageBody","getPostBody","cancel","_currentRequest$sourc","useQuery","deps","useMemo","createQueryStore","manual","interval","pollingIntervalMs","clearInterval","setInterval","refreshOnWindowFocus","refreshOnWindowFocusTimespanMs","refreshOnWindowFocusMode","useSubmit","createSubmitStore"],"sources":["../src/lib/art.ts","../src/lib/model.ts","../src/lib/cache.ts","../src/lib/axios/index.ts","../src/lib/utils.ts","../src/lib/hooks/browser-page-hooks.tsx","../src/lib/query.ts","../src/lib/submit.ts"],"sourcesContent":["import { UseResult } from './model'\nimport { AxiosInstance, AxiosStatic } from './axios/axios'\n\nexport interface TemplateConfigOptions {\n  baseURL?: string\n  axios?: AxiosStatic | any\n  showErrorMessage?: (res: UseResult) => void\n  showSuccessMessage?: (res: UseResult) => void\n  startLoading?: () => void\n  endLoading?: () => void\n  handleHttpResult?: (res: any) => UseResult\n  handleHttpErrorResult?: (resError: any) => UseResult\n  handlePage?: (current: number, pageSize: number) => any\n  handleHttpError?: <T>(resError: T) => void\n}\n\nexport class Art {\n  static axios?: AxiosInstance\n\n  // Default global configuration\n  static config: TemplateConfigOptions = {\n    showErrorMessage: (res) => {\n      console.log(res)\n    },\n    showSuccessMessage: (res) => {\n      console.log(res)\n    },\n    handlePage: (page, pageSize) => {\n      return { page, pageSize }\n    },\n    handleHttpResult: (resBody: any): UseResult<any> => {\n      const { success, errorCode, errorMessage, payload, count } = resBody || {}\n      return {\n        success,\n        code: errorCode,\n        message: errorMessage,\n        data: payload,\n        total: count\n      }\n    }\n  }\n\n  /**\n   * Set global configuration\n   * @param config\n   */\n  static setup(config?: TemplateConfigOptions): void {\n    if (config) {\n      this.config = { ...this.config, ...config }\n      if (this.config.axios) {\n        this.axios = this.config.axios.create({ baseURL: this.config.baseURL })\n      }\n    }\n  }\n}\n","export type Method =\n  | 'get'\n  | 'GET'\n  | 'delete'\n  | 'DELETE'\n  | 'head'\n  | 'HEAD'\n  | 'options'\n  | 'OPTIONS'\n  | 'post'\n  | 'POST'\n  | 'put'\n  | 'PUT'\n  | 'patch'\n  | 'PATCH'\n  | 'purge'\n  | 'PURGE'\n  | 'link'\n  | 'LINK'\n  | 'unlink'\n  | 'UNLINK'\n\n/**\n * API request status\n */\nexport enum ViewState {\n  idle,\n  busy,\n  error\n}\n\n/**\n * API return value object\n */\nexport interface UseResult<T = unknown> {\n  success?: boolean\n  data?: T\n  message?: string\n  code?: string\n  status?: string\n  total?: number\n  isCancel?: boolean\n  other?: any\n}\n\nexport type GetDefaultBody<T> = () => T\nexport type DefaultBodyType<T> = GetDefaultBody<T> | Partial<T> | T\n\nexport type RequestType<T = unknown> = (body?: Partial<T>) => Promise<any>\nexport type BaseConfig<R = unknown, P = unknown> = {\n  status?: boolean\n  loading?: boolean\n  isDefaultSet?: boolean\n  startLoading?: () => void\n  endLoading?: () => void\n  defaultBody?: DefaultBodyType<P> // 默认请求体\n  method?: Method // 方法\n  postBody?: (body: QueryBody<P>) => any // 转换body\n  autoClear?: boolean // 自动清空\n  showMessage?: boolean // 是否显示成功失败消息\n  showErrorMessage?: boolean // 是否显示错误消息\n  showSuccessMessage?: boolean // 是否显示成功消息\n  successCallback?: (res: UseResult<R>, cache: boolean) => void\n  failCallback?: (res: UseResult<R>) => void\n  onLoadComplete?: (res: UseResult<R>) => void\n  handleHttpResult?: (res: any) => UseResult<R>\n  postData?: (data: any) => R\n  loadingDelayMs?: number\n  debounceMs?: number\n  throttleMs?: number\n  cache?: boolean | string | ((body?: P) => string[])\n  cacheKey?: boolean\n  cacheTime?: number // 设置缓存数据回收时间 默认缓存数据 5 分钟后回收\n  staleTime?: number // 缓存数据保持新鲜时间\n}\n\nexport type ErrorType = {\n  message?: string\n  code?: string\n  status?: string\n  info?: any\n}\n\nexport type StorePageConfig = {\n  usePage?: boolean\n  pageSize?: number\n}\n\nexport type SubmitConfig<R = unknown, P = unknown> = BaseConfig<R, P> &\n  QueryRunConfig\n\nexport type QueryConfig<R = unknown, P = unknown> = BaseConfig<R, P> &\n  QueryRunConfig &\n  StorePageConfig\n\nexport type RefreshConfigType = { status?: boolean; loading?: boolean }\n\nexport type QueryRunConfig = RefreshConfigType & {\n  refresh?: boolean\n}\n\nexport type HooksConfig<R, P> = SubmitConfig<R, P> & {\n  manual?: boolean // 是否手动触发\n  pollingIntervalMs?: number\n  refreshOnWindowFocus?: boolean\n  refreshOnWindowFocusMode?: 'run' | 'refresh'\n  refreshOnWindowFocusTimespanMs?: number // 重新请求间隔，单位为毫秒\n}\n\nexport type QueryHooksConfig<R, P> = QueryConfig<R, P> & HooksConfig<R, P>\nexport type SubmitHooksConfig<R, P> = HooksConfig<R, P>\n\nexport type BaseQueryStoreType = {\n  status: ViewState\n  isBusy: boolean\n  isError: boolean\n  isEmpty?: boolean\n  setStatus: (status: ViewState) => void\n  lastRequestTime?: number\n  error?: ErrorType // 错误状态\n}\n\nexport type QueryBodyStoreType<P> = {\n  body?: Partial<P>\n  setBody: (body: Partial<P>, replace?: boolean) => void\n}\n\nexport type QueryDataStoreType<R = unknown> = {\n  originData?: any\n  data?: R\n  setData: (data?: R) => void\n}\n\nexport type QueryPageStoreType<R = unknown> = {\n  current: number\n  pageSize: number\n  total: number\n  offset?: string\n  setPage: (config: {\n    current?: number\n    pageSize?: number\n  }) => Promise<UseResult<R>>\n  loadMore?: () => Promise<UseResult<R>>\n}\n\nexport type QueryRunStoreType<R, P> = {\n  cancel: (message?: string) => void\n  run: (body?: Partial<P>, config?: QueryRunConfig) => Promise<UseResult<R>>\n  refresh: (config?: RefreshConfigType) => Promise<UseResult<R>>\n  clear: () => void\n}\n\nexport type StoreType<R, P> = QueryStoreType<R, P> | SubmitStoreType<R, P>\n\nexport type QueryStoreType<R, P> = BaseQueryStoreType &\n  QueryBodyStoreType<P> &\n  QueryDataStoreType<R> &\n  QueryPageStoreType<R> &\n  QueryRunStoreType<R, P>\n\nexport type SubmitStoreType<R, P> = BaseQueryStoreType &\n  QueryBodyStoreType<P> &\n  QueryDataStoreType<R> &\n  QueryRunStoreType<R, P>\n\nexport type PaginationType = {\n  current: number\n  pageSize: number\n  total: number\n  offset?: string\n}\n\nexport type CachedData<TData = unknown, TBody = unknown> = {\n  data: TData\n  body: TBody\n  pagination?: PaginationType\n  time: number\n}\n\nexport type RequestResult = {\n  type: 'axios'\n  request: () => Promise<any>\n  source?: any\n}\n\nexport type QueryBody<P> = Partial<P> & { current?: number; pageSize?: number }\n","import { CachedData } from './model'\n\nconst dataCache: Map<string, CachedData> = new Map()\n\nexport function createCacheKey(key?: string, ids?: string[]) {\n  const prefix = 'key'\n  return `${prefix}_${key}` + ids?.map((id) => `_${id}`)\n}\n\nexport function setCache<TData, TBody>(\n  key: string,\n  data: CachedData<TData, TBody>\n) {\n  dataCache.set(key, data)\n}\n\nexport function getCache<TData, TBody>(\n  key: string\n): CachedData<TData, TBody> | undefined {\n  return dataCache.get(key) as CachedData<TData, TBody> | undefined\n}\n\nexport function clearCache(key: string) {\n  dataCache.delete(key)\n}\n","import { Art } from '../art'\nimport { AxiosError, AxiosRequestConfig, Method } from './axios'\n\nexport function getAxiosRequest(\n  method: Method,\n  url: string,\n  body: any,\n  config?: AxiosRequestConfig\n): Promise<any> {\n  switch (method) {\n    case 'POST':\n    case 'post':\n      return Art.axios!.post(url, body, config)\n    case 'PUT':\n    case 'put':\n      return Art.axios!.put(url, body, config)\n    case 'DELETE':\n    case 'delete':\n      return Art.axios!.delete(url, config)\n    default:\n      return Art.axios!.get(url, config)\n  }\n}\n\nexport function handleError(e: any) {\n  if (Art.config.axios.isCancel(e)) {\n    return { success: false, isCancel: true, message: e.message }\n  } else {\n    const response = e.response\n    if (response) {\n      const axiosRes = e as AxiosError\n      if (Art.config.handleHttpErrorResult) {\n        return {\n          message: axiosRes.message,\n          ...Art.config.handleHttpErrorResult(response),\n          success: false,\n          status: response.status,\n          isCancel: false\n        }\n      } else {\n        return {\n          success: false,\n          status: response.status,\n          code: axiosRes.code,\n          message: axiosRes.message,\n          isCancel: false\n        }\n      }\n    } else {\n      throw new Error(e)\n    }\n  }\n}\n","import {\n  CachedData,\n  DefaultBodyType,\n  GetDefaultBody,\n  Method,\n  PaginationType,\n  QueryBody,\n  QueryConfig,\n  QueryRunConfig,\n  QueryStoreType,\n  RequestResult,\n  RequestType,\n  StoreType,\n  SubmitStoreType,\n  UseResult,\n  ViewState\n} from './model'\nimport { Art } from './art'\nimport { clearCache, createCacheKey, getCache, setCache } from './cache'\nimport { getAxiosRequest, handleError } from './axios'\n\n/**\n * 处理默认请求体\n * @param store 状态管理\n * @param defaultBody 默认请求内容\n * @param body 动态请求参数\n */\nexport function updateDefaultBody<P>(\n  store: StoreType<any, P>,\n  defaultBody?: DefaultBodyType<P>,\n  body?: Partial<P>\n) {\n  let _body\n  if (defaultBody) {\n    let _defaultBody\n    if (typeof defaultBody === 'function') {\n      _defaultBody = (defaultBody as GetDefaultBody<P>)()\n    } else {\n      _defaultBody = defaultBody\n    }\n    _body = { ..._defaultBody, ...(body ?? {}) }\n  } else {\n    _body = body\n  }\n  store.body = _body\n}\n\n/**\n * 添加分页请求参数\n * @param store\n * @param usePage 是否使用分页\n */\nexport function handlePageBody<R, P>(\n  store: StoreType<R, P>,\n  usePage?: boolean\n): any {\n  let _body = store.body as any\n  if (usePage) {\n    const _store = store as QueryStoreType<R, P>\n    if (Art.config.handlePage) {\n      _body = {\n        ...(_body ?? {}),\n        ...Art.config.handlePage(_store.current, _store.pageSize)\n      }\n    } else {\n      _body = {\n        ...(_body ?? {}),\n        current: _store.current,\n        pageSize: _store.pageSize\n      }\n    }\n  }\n  return _body\n}\n\n/**\n * 转化成提交之前的请求体\n * @param body\n * @param postBody\n */\nexport function getPostBody<P>(\n  body?: QueryBody<P>,\n  postBody?: (body: QueryBody<P>) => any\n) {\n  let _body = body\n  if (postBody && _body) {\n    _body = postBody(_body)\n  }\n  return _body\n}\n\n/**\n * 自动清除\n * @param store\n * @param autoClear\n */\nexport function autoClear(store: { clear: () => void }, autoClear?: boolean) {\n  if (autoClear) {\n    store.clear()\n  }\n}\n\n/**\n * 获取当前配置项目\n * @param config\n */\nexport function getMyConfig<R, P>(\n  config?: QueryConfig<R, P>\n): QueryConfig<R, P> {\n  // 初始化默认配置\n  const defaultConfig = {\n    status: true,\n    loading: false,\n    isDefaultSet: true,\n    autoClear: false,\n    cacheTime: 300000,\n    staleTime: 0,\n    showMessage: true,\n    showSuccessMessage: false,\n    showErrorMessage: true\n  } as QueryConfig<R, P>\n  // 得到当前配置\n  // @ts-ignore\n  return { ...defaultConfig, ...(config ?? {}) }\n}\n\n/**\n * 处理开始loading\n * @param config\n */\nexport function handleStartLoading(config: {\n  loading?: boolean\n  startLoading?: () => void\n}) {\n  if (config.loading && config.startLoading) {\n    config.startLoading()\n  }\n}\n\n/**\n * 处理结束loading\n * @param config\n */\nexport function handleEndLoading(config: {\n  loading?: boolean\n  startLoading?: () => void\n}) {\n  if (config.loading && config.startLoading) {\n    config.startLoading()\n  }\n}\n\nexport async function doRequest<T, P>(\n  request: RequestResult,\n  store: SubmitStoreType<T, P>,\n  config: QueryConfig<T, P>,\n  setData: (res: UseResult<T>) => void\n): Promise<UseResult<T>> {\n  // 处理开始loading\n  handleStartLoading(config)\n\n  const setStatus = async (status: ViewState) => {\n    const loadingWait = async () => {\n      if (status !== ViewState.busy && config.loadingDelayMs) {\n        await waitTime(config.loadingDelayMs)\n      }\n    }\n\n    if (config?.status) {\n      await loadingWait()\n      store.setStatus(status)\n    }\n  }\n\n  // 发送请求\n  let myRes: UseResult<T>\n  try {\n    // 设置状态\n    await setStatus(ViewState.busy)\n    // 请求接口\n    const res = await request.request()\n    // 转换数据\n    myRes = config.handleHttpResult\n      ? config.handleHttpResult(res)\n      : Art.config.handleHttpResult\n      ? Art.config.handleHttpResult(res)\n      : res\n    // 设置原始值\n    store.originData = myRes.data\n    // 转换成前端想要的数据格式\n    if (config.postData) {\n      myRes.data = config.postData(myRes.data)\n    }\n    // 设置状态\n    await setStatus(ViewState.idle)\n  } catch (e) {\n    // 处理异常\n    myRes = handleRequestCatch(e, request) as UseResult<T>\n    if (!myRes.isCancel) {\n      // 设置状态\n      await setStatus(ViewState.error)\n    } else {\n      // 设置状态\n      await setStatus(ViewState.idle)\n    }\n  }\n\n  setData(myRes)\n\n  // 处理回调\n  handleCallback<T, P>(config, myRes)\n\n  // 处理消息\n  handleMessage<T, P>(config, myRes)\n\n  // 结束loading\n  handleEndLoading(config)\n  return myRes\n}\n\n// 处理消息\nfunction handleMessage<T, P>(config: QueryConfig<T, P>, res: UseResult) {\n  if (config.showMessage) {\n    if (\n      res.success &&\n      config.showSuccessMessage &&\n      Art.config.showSuccessMessage\n    ) {\n      Art.config.showSuccessMessage(res)\n    } else if (\n      !res.success &&\n      config.showErrorMessage &&\n      Art.config.showErrorMessage\n    ) {\n      Art.config.showErrorMessage(res)\n    }\n  }\n}\n\n// 处理回调\nfunction handleCallback<T, P>(config: QueryConfig<T, P>, res: UseResult<T>) {\n  // 请求结束\n  if (res.success) {\n    if (config.successCallback) {\n      config.successCallback(res, false)\n    }\n  } else if (!res.isCancel) {\n    if (config.failCallback) {\n      config.failCallback(res)\n    }\n  }\n  if (config.onLoadComplete) {\n    config.onLoadComplete(res)\n  }\n}\n\n/**\n * 处理请求失败\n * @param e\n * @param request\n */\nfunction handleRequestCatch(e: any, request: RequestResult): UseResult {\n  let result = { success: false, isCancel: false, message: e } as UseResult\n  if (request.type === 'axios') {\n    result = handleError(e)\n  }\n\n  if (Art.config.handleHttpError) {\n    Art.config.handleHttpError(e)\n  }\n  console.log(e)\n  return result\n}\n\n/**\n * 创建请求\n * @param request 请求或者地址\n * @param body 请求阐述\n * @param method 方法\n */\nexport function getRequest(\n  request: RequestType | string,\n  body?: any,\n  method?: Method\n): RequestResult {\n  let _request: () => Promise<any>\n\n  let source: any\n\n  if (typeof request === 'function') {\n    _request = () => request(body)\n  } else {\n    let url = request as string\n    const isPathParams = url.includes('{') && url.includes('}')\n    const _method = method ?? (isPathParams ? 'GET' : body ? 'POST' : 'GET')\n    const isPost = method === 'POST' || method === 'post'\n    if (body && typeof body === 'object' && isPathParams) {\n      Object.keys(body).forEach((key) => {\n        // @ts-ignore\n        url = url.replace(new RegExp('\\\\{' + key + '\\\\}', 'g'), body[key])\n      })\n    }\n\n    if (Art.config.axios != null) {\n      source = Art.config.axios.CancelToken.source()\n      _request = () =>\n        getAxiosRequest(_method, url, body ?? (isPost ? {} : undefined), {\n          cancelToken: source.token\n        })\n    } else {\n      throw new Error('Coco 必须实例化 http 组件，目前支持axios')\n    }\n  }\n  return { request: _request, type: 'axios', source }\n}\n\nexport function setBody<P>(\n  store: { body?: Partial<P> },\n  inBody: Partial<P>,\n  replace = false\n): void {\n  const { body } = store\n  if (body && !replace) {\n    store.body = { ...inBody, ...store.body }\n  } else {\n    store.body = inBody\n  }\n}\n\n/**\n * 延迟等待\n * @param time 等待时间\n */\nexport const waitTime = (time = 100) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(true)\n    }, time)\n  })\n}\n\n/**\n * 处理请求\n * @param request\n * @param config\n */\nexport function doRun<R, P>(\n  request: (\n    body?: Partial<P>,\n    config?: QueryRunConfig\n  ) => Promise<UseResult<R>>,\n  config: QueryConfig<R, P>\n) {\n  if (config.throttleMs) {\n    return throttle(request, config.throttleMs)\n  }\n  return debounce(request, config.debounceMs)\n}\n\n// 防抖函数\nexport function debounce<R, P>(\n  request: (\n    body?: Partial<P>,\n    config?: QueryRunConfig\n  ) => Promise<UseResult<R>>,\n  ms?: number\n) {\n  let timeout: any\n  return (\n    body?: Partial<P>,\n    config?: QueryRunConfig\n  ): Promise<UseResult<R>> => {\n    clearTimeout(timeout)\n    return new Promise((resolve) => {\n      if (ms) {\n        timeout = setTimeout(() => {\n          resolve(request(body, config))\n        }, ms)\n      } else {\n        resolve(request(body, config))\n      }\n    })\n  }\n}\n\n// 节流函数\nexport function throttle<R, P>(\n  request: (\n    body?: Partial<P>,\n    config?: QueryRunConfig\n  ) => Promise<UseResult<R>>,\n  waitMs: number\n) {\n  let timeout: any\n  let old = 0\n  return (\n    body?: Partial<P>,\n    config?: QueryRunConfig\n  ): Promise<UseResult<R>> => {\n    return new Promise((resolve) => {\n      const now = new Date().valueOf()\n      if (!old) {\n        old = now\n      }\n      if (now - old > waitMs) {\n        if (timeout) {\n          clearTimeout(timeout)\n          timeout = null\n        }\n        resolve(request(body, config))\n        old = now\n      } else if (!timeout) {\n        timeout = setTimeout(() => {\n          old = new Date().valueOf()\n          timeout = null\n          resolve(request(body, config))\n        }, waitMs)\n      }\n    })\n  }\n}\n\n/**\n * 处理数据缓存\n * @param config\n * @param request\n * @param store\n * @param res\n */\nexport function setStoreCacheData<R, P>(\n  config: QueryConfig<R, P>,\n  request: RequestType<P> | string,\n  store: StoreType<R, P>,\n  res: UseResult<R>\n) {\n  if (!config.cache) {\n    return\n  }\n\n  const key = getCacheKey(config, request, store)\n\n  let pagination: PaginationType | undefined\n  try {\n    if (config.usePage) {\n      const { current, pageSize, total, offset } = store as QueryStoreType<R, P>\n      pagination = { current, pageSize, total, offset }\n    }\n  } catch (e) {}\n\n  setCache<UseResult<R>, P>(key, {\n    body: store.body as P,\n    data: res,\n    time: new Date().getTime(),\n    pagination\n  })\n}\n\nexport function getStoreCacheData<R, P>(\n  config: QueryConfig<R, P>,\n  request: RequestType<P> | string,\n  store: StoreType<R, P>\n) {\n  if (!config.cache) {\n    return { cache: undefined, active: false }\n  }\n\n  const key = getCacheKey(config, request, store)\n\n  const cache = getCache<UseResult<R>, P>(key)\n\n  if (cache) {\n    const cacheTime = config.cacheTime ?? 300000\n    if (cacheTime < 0 || new Date().getTime() - cache.time <= cacheTime) {\n      return { cache, active: true }\n    } else {\n      clearCache(key)\n    }\n  }\n  return { cache: undefined, active: false }\n}\n\nexport function getCacheRequest<R, P>(\n  config: QueryConfig<R, P>,\n  cache: CachedData<UseResult<R>, P>,\n  store: StoreType<R, P>\n): Promise<UseResult<R>> {\n  const res = cache.data\n  if (config.successCallback) {\n    config.successCallback(res, true)\n  }\n  if (cache.pagination) {\n    try {\n      const _store = store as QueryStoreType<R, P>\n      const { current, pageSize, total, offset } = cache.pagination\n      _store.current = current\n      _store.pageSize = pageSize\n      _store.total = total\n      _store.offset = offset\n    } catch (e) {}\n  }\n  store.data = cache.data.data\n  store.body = cache.body\n\n  // 控制新鲜度, 如果过期新鲜度\n  const staleTime = config.staleTime ?? 0\n  if (staleTime >= 0 && new Date().getTime() - cache.time > staleTime) {\n    store.refresh().then()\n  }\n  return new Promise((resolve) => resolve(res))\n}\n\nexport function getCacheKey<R, P>(\n  config: QueryConfig<R, P>,\n  request: RequestType<P> | string,\n  store: StoreType<R, P>\n) {\n  let key\n\n  if (config.cache === true || typeof config.cache === 'function') {\n    if (typeof request === 'function') {\n      throw new Error('request是url的形式的时候，cache只能是字符串')\n    }\n  }\n  if (typeof config.cache === 'string') {\n    key = createCacheKey(config.cache)\n  } else if (typeof config.cache === 'function') {\n    const ids = config.cache(store.body as P)\n    key = createCacheKey(request as string, ids)\n  } else {\n    key = createCacheKey(request as string)\n  }\n  if (config.usePage) {\n    const { current, pageSize, offset } = store as QueryStoreType<R, P>\n    return `${key}_${current}_${pageSize}` + offset ? `'_${offset}'` : ''\n  }\n  return key\n}\n","import React, { useEffect } from 'react'\n// @ts-ignore\nconst document: any = window ? window.document : undefined\nconst visible = 'visible'\n\n/**\n * 检查浏览器标签切换\n */\nexport const useBrowserPageChange = () => {\n  const [visibilityChange, setVisibilityChange] = React.useState<boolean>(false)\n\n  const getHiddenProp = () => {\n    if (!document) {\n      return null\n    }\n    const prefixes = ['webkit', 'moz', 'ms', 'o']\n\n    // if 'hidden' is natively supported just return it\n    if ('hidden' in document) {\n      return 'hidden'\n    }\n\n    // otherwise loop over all the known prefixes until we find one\n    for (let i = 0; i < prefixes.length; i++) {\n      if (prefixes[i] + 'Hidden' in document) return prefixes[i] + 'Hidden'\n    }\n\n    // otherwise it's not supported\n    return null\n  }\n\n  const getVisibilityState = () => {\n    const prefixes = ['webkit', 'moz', 'ms', 'o']\n    if ('visibilityState' in document) return 'visibilityState'\n    for (let i = 0; i < prefixes.length; i++) {\n      if (prefixes[i] + 'VisibilityState' in document)\n        return prefixes[i] + 'VisibilityState'\n    }\n    // otherwise it's not supported\n    return null\n  }\n\n  useEffect(() => {\n    const eventName =\n      (getHiddenProp() ?? '').replace(/[H|h]idden/, '') + 'visibilitychange'\n    if (getHiddenProp()) {\n      document.addEventListener(\n        eventName,\n        function () {\n          setVisibilityChange(document[getVisibilityState() ?? ''] === visible)\n        },\n        false\n      )\n    }\n    return () => {\n      document.removeEventListener(eventName, function () {\n        setVisibilityChange(document[getVisibilityState() ?? ''] === visible)\n      })\n    }\n  }, [getHiddenProp()])\n\n  return { visibilityChange }\n}\n","import { DependencyList, useEffect, useMemo } from 'react'\nimport {\n  autoClear,\n  doRequest,\n  doRun,\n  getCacheRequest,\n  getMyConfig,\n  getPostBody,\n  getRequest,\n  getStoreCacheData,\n  handlePageBody,\n  setBody,\n  setStoreCacheData,\n  updateDefaultBody\n} from './utils'\nimport {\n  QueryConfig,\n  QueryHooksConfig,\n  QueryRunConfig,\n  QueryStoreType,\n  RequestResult,\n  RequestType,\n  UseResult,\n  ViewState\n} from './model'\nimport resso from 'resso'\nimport { useBrowserPageChange } from './hooks/browser-page-hooks'\n\nexport function createQueryStore<\n  R = Record<string, any> | string,\n  P = Record<string, any>\n>(request: RequestType<P> | string, config?: QueryConfig<R, P>) {\n  // 得到当前配置\n  let myConfig = getMyConfig<R, P>(config) as QueryConfig<R, P>\n\n  // 当前请求\n  let currentRequest: RequestResult | undefined\n\n  // 设置返回数据\n  function setResData(res: UseResult<R>) {\n    if (res.success) {\n      if (myConfig.isDefaultSet) {\n        store.setData(res.data)\n        store.total = res.total ?? 0\n      }\n      if (myConfig?.status && store?.status !== ViewState.error) {\n        store.isEmpty =\n          !res.data ||\n          (res.data && res.data instanceof Array && !res.data.length)\n      }\n      // 记录最后时间\n      store.lastRequestTime = new Date().getTime()\n\n      // 处理缓存\n      setStoreCacheData(myConfig, request, store, res)\n    } else if (!res.isCancel) {\n      store.error = { message: res.message, code: res.code, status: res.status }\n    }\n  }\n\n  // 创建store\n  const store = resso<QueryStoreType<R, P>>({\n    isBusy: false,\n    isError: false,\n    status: ViewState.idle,\n    isEmpty: undefined,\n    error: undefined,\n    setStatus: (status: ViewState) => {\n      store.status = status\n      store.isError = status === ViewState.error\n      store.isBusy = status === ViewState.busy\n    },\n    lastRequestTime: undefined,\n    body: undefined,\n    setBody: (inBody: Partial<P>, replace = false) => {\n      setBody<P>(store, inBody, replace)\n    },\n    current: 1,\n    pageSize: config?.pageSize ?? 10,\n    total: 0,\n    offset: undefined,\n    setPage: (config): Promise<UseResult<R>> => {\n      const { current, pageSize } = config ?? {}\n      if (current) {\n        store.current = current\n      }\n      if (pageSize) {\n        store.pageSize = pageSize\n      }\n      return store.run()\n    },\n    originData: undefined,\n    data: undefined,\n    setData: (data?: R) => {\n      store.data = data\n    },\n    refresh: (config): Promise<UseResult<R>> => {\n      myConfig = {\n        ...myConfig,\n        loading: false,\n        status: false,\n        ...(config ?? {}),\n        refresh: true\n      }\n      if (!currentRequest) {\n        return store.run(undefined, myConfig)\n      } else {\n        return doRequest<R, P>(currentRequest, store, myConfig, setResData)\n      }\n    },\n    run: doRun<R, P>(\n      (body?: Partial<P>, config?: QueryRunConfig): Promise<UseResult<R>> => {\n        myConfig = { ...myConfig, ...config }\n        // 清除\n        autoClear(store, myConfig.autoClear)\n\n        console.log(store)\n        // 获取缓存\n        const { cache, active } = getStoreCacheData<R, P>(\n          myConfig,\n          request,\n          store\n        )\n        // 如果有缓存 并且缓存有效\n        if (!config?.refresh && cache && active) {\n          return getCacheRequest<R, P>(myConfig, cache, store)\n        } else {\n          // 设置body\n          updateDefaultBody<P>(store, myConfig.defaultBody, body)\n          // 处理分页\n          let _body = handlePageBody(store, myConfig.usePage)\n          // 获取准备提交的请求体\n          _body = getPostBody(_body, myConfig.postBody)\n          // 获取请求体\n          currentRequest = getRequest(request, _body, myConfig.method)\n          // 发送请求\n          return doRequest<R, P>(currentRequest, store, myConfig, setResData)\n        }\n      },\n      myConfig\n    ),\n    cancel: (message?: string) => {\n      if (currentRequest) {\n        if (currentRequest.type === 'axios') {\n          // eslint-disable-next-line no-unused-expressions\n          currentRequest.source?.cancel(message)\n        }\n      }\n    },\n    clear: () => {\n      store.data = undefined\n      store.body = undefined\n      store.total = 0\n      store.current = 1\n      store.isEmpty = undefined\n    }\n  })\n  return store\n}\n\nexport function useQuery<\n  R = Record<string, any> | string,\n  P = Record<string, any>\n>(\n  request: RequestType<P> | string,\n  config?: QueryHooksConfig<R, P>,\n  deps?: DependencyList\n) {\n  const store = useMemo(() => createQueryStore(request, config), deps ?? [])\n  useEffect(() => {\n    const manual = config?.manual ?? false\n    if (!manual) {\n      store.run().then()\n    }\n    let interval: any\n    if (config?.pollingIntervalMs) {\n      if (interval) {\n        clearInterval(interval)\n      }\n      interval = setInterval(() => {\n        store.run().then()\n      }, config?.pollingIntervalMs)\n    }\n    return () => {\n      if (interval) {\n        clearInterval(interval)\n      }\n      store.cancel()\n    }\n  }, deps ?? [])\n\n  const { visibilityChange } = useBrowserPageChange()\n\n  useEffect(() => {\n    if (config?.refreshOnWindowFocus && visibilityChange) {\n      if (\n        !store.lastRequestTime ||\n        new Date().getTime() - store.lastRequestTime >\n          (config?.refreshOnWindowFocusTimespanMs ?? 0)\n      )\n        if (config?.refreshOnWindowFocusMode === 'run') {\n          store.run().then()\n        } else {\n          store.refresh().then()\n        }\n    }\n  }, [visibilityChange])\n  return store\n}\n","import { DependencyList, useEffect, useMemo } from 'react'\nimport {\n  autoClear,\n  doRequest,\n  doRun,\n  getCacheRequest,\n  getMyConfig,\n  getPostBody,\n  getRequest,\n  getStoreCacheData,\n  handlePageBody,\n  setBody,\n  setStoreCacheData,\n  updateDefaultBody\n} from './utils'\nimport {\n  QueryConfig,\n  QueryRunConfig,\n  RequestResult,\n  RequestType,\n  SubmitConfig,\n  SubmitHooksConfig,\n  SubmitStoreType,\n  UseResult,\n  ViewState\n} from './model'\nimport resso from 'resso'\nimport { useBrowserPageChange } from './hooks/browser-page-hooks'\n\nexport function createSubmitStore<\n  R = Record<string, any> | string,\n  P = Record<string, any>\n>(request: RequestType<P> | string, config?: SubmitConfig<R, P>) {\n  // 得到当前配置\n  let myConfig = getMyConfig<R, P>(config) as QueryConfig<R, P>\n\n  // 当前请求\n  let currentRequest: RequestResult\n\n  // 设置返回数据\n  function setResData(res: UseResult<R>) {\n    if (res.success) {\n      if (myConfig.isDefaultSet) {\n        store.setData(res.data)\n      }\n      if (myConfig?.status && store?.status !== ViewState.error) {\n        store.isEmpty =\n          !res.data ||\n          (res.data && res.data instanceof Array && !res.data.length)\n      }\n      // 记录最后时间\n      store.lastRequestTime = new Date().getTime()\n\n      // 处理缓存\n      setStoreCacheData(myConfig, request, store, res)\n    } else if (!res.isCancel) {\n      store.error = { message: res.message, code: res.code, status: res.status }\n    }\n  }\n\n  // 创建store\n  const store = resso<SubmitStoreType<R, P>>({\n    isBusy: false,\n    isError: false,\n    status: ViewState.idle,\n    isEmpty: undefined,\n    error: undefined,\n    setStatus: (status: ViewState) => {\n      store.status = status\n      store.isError = status === ViewState.error\n      store.isBusy = status === ViewState.busy\n    },\n    lastRequestTime: undefined,\n    body: undefined,\n    setBody: (inBody: Partial<P>, replace = false) => {\n      setBody<P>(store, inBody, replace)\n    },\n    originData: undefined,\n    data: undefined,\n    setData: (data?: R) => {\n      store.data = data\n    },\n    refresh: (config): Promise<UseResult<R>> => {\n      myConfig = {\n        ...myConfig,\n        loading: false,\n        status: false,\n        ...(config ?? {}),\n        refresh: true\n      }\n      if (!currentRequest) {\n        return store.run(undefined, myConfig)\n      } else {\n        return doRequest<R, P>(currentRequest, store, myConfig, setResData)\n      }\n    },\n    run: doRun<R, P>(\n      (body?: Partial<P>, config?: QueryRunConfig): Promise<UseResult<R>> => {\n        myConfig = { ...myConfig, ...config }\n        // 清除\n        autoClear(store, myConfig.autoClear)\n        // 获取缓存\n        const { cache, active } = getStoreCacheData<R, P>(\n          myConfig,\n          request,\n          store\n        )\n        // 如果有缓存 并且缓存有效\n        if (!config?.refresh && cache && active) {\n          return getCacheRequest<R, P>(myConfig, cache, store)\n        } else {\n          // 设置body\n          updateDefaultBody<P>(store, myConfig.defaultBody, body)\n          // 处理分页\n          let _body = handlePageBody(store, myConfig.usePage)\n          // 获取准备提交的请求体\n          _body = getPostBody(_body, myConfig.postBody)\n          // 获取请求体\n          currentRequest = getRequest(request, _body, myConfig.method)\n          // 发送请求\n          return doRequest<R, P>(currentRequest, store, myConfig, setResData)\n        }\n      },\n      myConfig\n    ),\n    cancel: (message?: string) => {\n      if (currentRequest) {\n        if (currentRequest.type === 'axios') {\n          // eslint-disable-next-line no-unused-expressions\n          currentRequest.source?.cancel(message)\n        }\n      }\n    },\n    clear: () => {\n      store.data = undefined\n      store.body = undefined\n      store.isEmpty = undefined\n    }\n  })\n  return store\n}\n\nexport function useSubmit<\n  R = Record<string, any> | string,\n  P = Record<string, any>\n>(\n  request: RequestType<P> | string,\n  config?: SubmitHooksConfig<R, P>,\n  deps?: DependencyList\n) {\n  const store = useMemo(() => createSubmitStore(request, config), deps ?? [])\n  useEffect(() => {\n    const manual = config?.manual ?? true\n    if (!manual) {\n      store.run().then()\n    }\n    let interval: any\n    if (config?.pollingIntervalMs) {\n      if (interval) {\n        clearInterval(interval)\n      }\n      interval = setInterval(() => {\n        store.run().then()\n      }, config?.pollingIntervalMs)\n    }\n    return () => {\n      if (interval) {\n        clearInterval(interval)\n      }\n      store.cancel()\n    }\n  }, deps ?? [])\n\n  const { visibilityChange } = useBrowserPageChange()\n\n  useEffect(() => {\n    if (config?.refreshOnWindowFocus && visibilityChange) {\n      if (\n        !store.lastRequestTime ||\n        new Date().getTime() - store.lastRequestTime >\n          (config?.refreshOnWindowFocusTimespanMs ?? 0)\n      )\n        if (config?.refreshOnWindowFocusMode === 'run') {\n          store.run().then()\n        } else {\n          store.refresh().then()\n        }\n    }\n  }, [visibilityChange])\n  return store\n}\n"]},"metadata":{},"sourceType":"script"}